// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.13;

import "forge-std/Test.sol";
import "../src/SafeVault.sol";
import "../src/Attacker.sol";

contract SafeVaultTest is Test {
    SafeVault public vault;
    ReentrancyAttacker public reentrancyAttacker;
    IntegerOverUnderflowAttacker public integerOverUnderflowAttacker;

    function setUp() public {
        vault = new SafeVault();
        reentrancyAttacker = new ReentrancyAttacker();
        integerOverUnderflowAttacker = new IntegerOverUnderflowAttacker();

        vm.deal(address(reentrancyAttacker), 10);
        vm.deal(address(integerOverUnderflowAttacker), 10);
        vm.deal(address(vault), 10_000);

        vm.prank(address(reentrancyAttacker));
        vault.deposit{value: 10}();

        vm.prank(address(integerOverUnderflowAttacker));
        vault.deposit{value: 10}();
    }

    function testReentrancySuccessEasy() public {
        address attacker = address(reentrancyAttacker);
        emit log_named_uint("Attacker's vault balance", vault.balance(attacker));
        emit log_named_uint("Attacker's ether balance", attacker.balance);
        console.log("======");
        vm.prank(attacker);
        vault.withdrawAll(attacker);
        emit log_named_uint("Attacker's vault balance", vault.balance(attacker));
        emit log_named_uint("Attacker's ether balance", attacker.balance);
        assertGt(attacker.balance, 99);
    }

    function testReentrancySuccessHard() public {
        address attacker = address(reentrancyAttacker);
        emit log_named_uint("Attacker's vault balance", vault.balance(attacker));
        emit log_named_uint("Attacker's ether balance", attacker.balance);
        console.log("======");
        vm.prank(attacker);
        vault.withdrawAll{gas: 250_000}(attacker);
        emit log_named_uint("Attacker's vault balance", vault.balance(attacker));
        emit log_named_uint("Attacker's ether balance", attacker.balance);
        assertGt(attacker.balance, 5_000);
    }

    function testIntegerOverUnderflow() public {
        address attacker = address(integerOverUnderflowAttacker);
        emit log_named_uint("Attacker's vault balance", vault.balance(attacker));
        emit log_named_uint("Attacker's ether balance", attacker.balance);
        console.log("======");

        integerOverUnderflowAttacker.integerOverUnderflowAttackHandler{gas: 100_000}(address(vault));

        emit log_named_uint("Attacker's vault balance", vault.balance(attacker));
        emit log_named_uint("Attacker's ether balance", attacker.balance);
        assertEq(attacker.balance, 10_020);
    }
}
